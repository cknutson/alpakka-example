akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = INFO
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

a {
  # Properties for akka.kafka.ProducerSettings can be
  # defined in this section or a configuration section with
  # the same layout.
  maxQueueSize = 10000
  kafka.producer {
    # Tuning parameter of how many sends that can run in parallel.
    parallelism = 6

    # Duration to wait for `KafkaConsumer.close` to finish.
    close-timeout = 60s

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by the producer stages. Some blocking may occur.
    # When this value is empty, the dispatcher configured for the stream
    # will be used.
    use-dispatcher = "akka.kafka.default-dispatcher"

    # The time interval to commit a transaction when using the `Transactional.sink` or `Transactional.flow`
    eos-commit-interval = 100ms

    topic = "a-to-b"

    # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
    # can be defined in this configuration section.
    kafka-clients {
      bootstrap.servers = "localhost:9092"
      client.id = "client-producer-a"
      metadata.max.age.ms = 60000
      compression.type = lz4
      batch.size = 1000
    }
  }
}

b {
  maxBatchSize = 1000
  logInterval = 10000

  kafka.consumer {
    poll-interval = 100ms
    poll-timeout = 50ms
    stop-timeout = 30s
    close-timeout = 20s
    commit-timeout = 15s
    commit-time-warning = 5s
    commit-refresh-interval = infinite
    wakeup-debug = true
    wakeup-timeout = 3s
    max-wakeups = 10
    wait-close-partition = 500ms
    use-dispatcher = "akka.kafka.default-dispatcher"
    topic = "a-to-b"
    kafka-clients {
      bootstrap.servers = "localhost:9092"
      group.id = "group-b"
      client.id = "client-consumer-b"
      enable.auto.commit = false
      auto.offset.reset = latest
    }
  }

  kafka.producer {
    parallelism = 100
    close-timeout = 60s
    eos-commit-interval = 100ms
    use-dispatcher = "akka.kafka.default-dispatcher"
    topic = "b-to-c"
    kafka-clients {
      bootstrap.servers = "localhost:9092"
      client.id = "client-producer-b"
      metadata.max.age.ms = 60000
      compression.type = lz4
      batch.size = 1000
    }
  }
}

c {
  # Properties for akka.kafka.ConsumerSettings can be
  # defined in this section or a configuration section with
  # the same layout.
  kafka.consumer {
    maxBatchSize = 1000
    logInterval = 10000
    # Tuning property of scheduled polls.
    poll-interval = 100ms

    # Tuning property of the `KafkaConsumer.poll` parameter.
    # Note that non-zero value means that the thread that
    # is executing the stage will be blocked.
    poll-timeout = 50ms

    # The stage will await outstanding offset commit requests before
    # shutting down, but if that takes longer than this timeout it will
    # stop forcefully.
    stop-timeout = 30s

    # How long to wait for `KafkaConsumer.close`
    close-timeout = 20s

    # If offset commit requests are not completed within this timeout
    # the returned Future is completed `CommitTimeoutException`.
    commit-timeout = 15s

    # If commits take longer than this time a warning is logged
    commit-time-warning = 5s

    # If for any reason `KafkaConsumer.poll` blocks for longer than the configured
    # poll-timeout then it is forcefully woken up with `KafkaConsumer.wakeup`.
    # The KafkaConsumerActor will throw
    # `org.apache.kafka.common.errors.WakeupException` which will be ignored
    # until `max-wakeups` limit gets exceeded.
    wakeup-timeout = 3s

    # After exceeding maxinum wakeups the consumer will stop and the stage and fail.
    # Setting it to 0 will let it ignore the wakeups and try to get the polling done forever.
    max-wakeups = 10

    # If set to a finite duration, the consumer will re-send the last committed offsets periodically
    # for all assigned partitions. See https://issues.apache.org/jira/browse/KAFKA-4682.
    commit-refresh-interval = infinite

    # If enabled, log stack traces before waking up the KafkaConsumer to give
    # some indication why the KafkaConsumer is not honouring the `poll-timeout`
    wakeup-debug = true

    # Time to wait for pending requests when a partition is closed
    wait-close-partition = 500ms

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by the KafkaConsumerActor. Some blocking may occur.
    use-dispatcher = "akka.kafka.default-dispatcher"

    topic = "b-to-c"

    # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
    # can be defined in this configuration section.
    kafka-clients {
      bootstrap.servers = "localhost:9092"
      group.id = "group-c"
      client.id = "client-consumer-c"
      enable.auto.commit = false
      auto.offset.reset = latest
      heartbeat.interval.ms = 3000
    }
  }
}
